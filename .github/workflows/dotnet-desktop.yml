name: .NET Core Desktop

on:
  push:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: windows-latest
    env:
      Solution_Name: Trumpf.Coparoo.Playwright.sln
      Test_Project_Folder: Trumpf.Coparoo.Playwright.Tests
      Test_Project_Path: Trumpf.Coparoo.Playwright.Tests\Trumpf.Coparoo.Playwright.Tests.csproj
      Controls_Test_Project_Folder: Trumpf.Coparoo.Playwright.Controls.Tests
      Controls_Test_Project_Path: Trumpf.Coparoo.Playwright.Controls.Tests\Trumpf.Coparoo.Playwright.Controls.Tests.csproj
      Package_Output_Dir: ${{ github.workspace }}\artifacts
      Test_Results_Dir: ${{ github.workspace }}\test-results

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Build the solution
    - name: Build
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

    # Execute unit tests for Trumpf.Coparoo.Playwright.Tests (continue on error to allow test results upload if failed)
    - name: Execute Playwright Tests
      if: matrix.configuration == 'Debug'
      continue-on-error: false
      run: |
        mkdir -p ${{ env.Test_Results_Dir }}
        pwsh ${{ env.Test_Project_Folder }}/bin/Debug/net8.0/playwright.ps1 install
        dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }} --verbosity normal --logger "trx;LogFileName=${{ env.Test_Results_Dir }}\test_result_playwright_${{ matrix.configuration }}.trx"
        echo "Listing files in test results directory:"
        dir ${{ env.Test_Results_Dir }}

    # Execute unit tests for Trumpf.Coparoo.Playwright.Controls.Tests
    - name: Execute Controls Tests
      if: matrix.configuration == 'Debug'
      continue-on-error: false
      run: |
        pwsh ${{ env.Controls_Test_Project_Folder }}/bin/Debug/net8.0/playwright.ps1 install
        dotnet test ${{ env.Controls_Test_Project_Path }} --configuration ${{ matrix.configuration }} --verbosity normal --logger "trx;LogFileName=${{ env.Test_Results_Dir }}\test_result_controls_${{ matrix.configuration }}.trx"
        echo "Listing files in test results directory:"
        dir ${{ env.Test_Results_Dir }}

    # Upload test results if the previous test step failed
    - name: Upload Test Results on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.configuration }}
        path: ${{ env.Test_Results_Dir }}\*.trx

    # Generate NuGet packages for both projects in Release configuration only if all steps succeed
    - name: Generate NuGet Package
      if: matrix.configuration == 'Release' && success()
      run: |
        dotnet pack ${{ env.Solution_Name }} --configuration Release --no-build --output ${{ env.Package_Output_Dir }}
        echo "Listing NuGet packages:"
        dir ${{ env.Package_Output_Dir }}

    # Upload the NuGet packages as artifacts
    - name: Upload NuGet Package
      if: matrix.configuration == 'Release' && success()
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.Package_Output_Dir }}\*.nupkg
